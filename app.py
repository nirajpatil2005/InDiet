import streamlit as st
from diet import load_data, calculate_bmi, calculate_bmr, calculate_daily_calories, recommend_diet, show_3d_visualization
from exercise import ExerciseRecommender
import pandas as pd
import plotly.express as px

# Streamlit UI Configuration
st.set_page_config(page_title="ЁЯН╜я╕П Personalized Diet & Exercise Plan", page_icon="ЁЯПЛя╕П", layout="wide")

# Language translations
translations = {
    "english": {
        "title": "ЁЯН╜я╕П Personalized Diet & Exercise Plan",
        "instructions": "Fill in your details to generate a personalized meal and exercise plan.",
        "personal_info": "ЁЯСд Personal Information",
        "age": "Enter Your Age",
        "gender": "Gender",
        "weight": "Enter Your Weight (kg)",
        "height": "Enter Your Height (cm)",
        "activity": "Activity Level",
        "goals": "ЁЯОп Goals & Preferences",
        "goal_select": "Select Your Goal",
        "food_pref": "Food Preference",
        "region_pref": "Preferred Region",
        "allergies": "Allergies/Dietary Restrictions",
        "calorie_intake": "ЁЯФе Calorie Intake (Optional)",
        "use_calculated": "Use calculated recommended calories",
        "enter_calories": "Enter Daily Calorie Intake (kcal)",
        "nutrient_weight": "тЪЦя╕П Nutrient Weightage",
        "nutrient_score": "Importance of Nutrient Score",
        "health_score": "Importance of Health Score",
        "diversity_score": "Importance of Diversity Score",
        "protein_ratio": "Importance of Protein Ratio",
        "generate": "тЬи Generate Plans",
        "how_it_works": "How it works:",
        "step1": "Fill in your personal details in the sidebar",
        "step2": "Set your goals and preferences",
        "step3": "Click 'Generate Plans' to get your customized recommendations",
        "health_metrics": "ЁЯУК Your Health Metrics",
        "bmi": "BMI",
        "underweight": "Underweight: Consider increasing calories",
        "normal": "Normal Weight: Good job!",
        "overweight": "Overweight: Consider reducing calories",
        "obese": "Obese: Significant calorie reduction recommended",
        "recommended_calories": "Recommended Calories",
        "your_intake": "Your Calorie Intake",
        "lower": "Your intake is lower than recommended",
        "higher": "Your intake is higher than recommended",
        "aligns": "Your intake aligns with recommendations",
        "meal_plan": "ЁЯН╜я╕П Your Personalized Meal Plan",
        "daily_meals": "Your Daily Meals",
        "nutrient_intake": "ЁЯУК Daily Nutrient Intake Breakdown",
        "macronutrient": "ЁЯеЧ Macronutrient Distribution",
        "food_recommendation": "ЁЯФН Food Recommendation Space",
        "exercise_plan": "ЁЯПЛя╕П Your Personalized Exercise Plan",
        "full_body": "Full-Body Workout Plan",
        "exercise_tips": "Exercise Tips",
        "weight_loss_tips": "- Focus on cardio exercises (30-60 mins per session)\n- Incorporate HIIT workouts 2-3 times per week\n- Strength training helps maintain muscle while losing fat",
        "muscle_gain_tips": "- Prioritize strength training (3-5 times per week)\n- Focus on progressive overload\n- Allow adequate rest between workouts",
        "maintenance_tips": "- Balance between cardio and strength training\n- Try different activities to prevent boredom\n- Listen to your body and adjust as needed",
        "download_meal": "ЁЯУе Download Meal Plan",
        "fill_details": "ЁЯСИ Fill in your details in the sidebar and click 'Generate Plans' to get started"
    },
    "hindi": {
        "title": "ЁЯН╜я╕П рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЖрд╣рд╛рд░ рдФрд░ рд╡реНрдпрд╛рдпрд╛рдо рдпреЛрдЬрдирд╛",
        "instructions": "рдЕрдкрдирд╛ рд╡реНрдпрдХреНрддрд┐рдЧрдд рднреЛрдЬрди рдФрд░ рд╡реНрдпрд╛рдпрд╛рдо рдпреЛрдЬрдирд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреЗ рд╡рд┐рд╡рд░рдг рднрд░реЗрдВред",
        "personal_info": "ЁЯСд рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬрд╛рдирдХрд╛рд░реА",
        "age": "рдЕрдкрдиреА рдЖрдпреБ рджрд░реНрдЬ рдХрд░реЗрдВ",
        "gender": "рд▓рд┐рдВрдЧ",
        "weight": "рдЕрдкрдирд╛ рд╡рдЬрди рджрд░реНрдЬ рдХрд░реЗрдВ (рдХрд┐рд▓реЛ)",
        "height": "рдЕрдкрдиреА рдКрдВрдЪрд╛рдИ рджрд░реНрдЬ рдХрд░реЗрдВ (рд╕реЗрдореА)",
        "activity": "рдЧрддрд┐рд╡рд┐рдзрд┐ рд╕реНрддрд░",
        "goals": "ЁЯОп рд▓рдХреНрд╖реНрдп рдФрд░ рдкреНрд░рд╛рдердорд┐рдХрддрд╛рдПрдВ",
        "goal_select": "рдЕрдкрдирд╛ рд▓рдХреНрд╖реНрдп рдЪреБрдиреЗрдВ",
        "food_pref": "рднреЛрдЬрди рдкреНрд░рд╛рдердорд┐рдХрддрд╛",
        "region_pref": "рдкрд╕рдВрджреАрджрд╛ рдХреНрд╖реЗрддреНрд░",
        "allergies": "рдПрд▓рд░реНрдЬреА/рдЖрд╣рд╛рд░ рдкреНрд░рддрд┐рдмрдВрдз",
        "calorie_intake": "ЁЯФе рдХреИрд▓реЛрд░реА рд╕реЗрд╡рди (рд╡реИрдХрд▓реНрдкрд┐рдХ)",
        "use_calculated": "рдЧрдгрдирд╛ рдХреА рдЧрдИ рдЕрдиреБрд╢рдВрд╕рд┐рдд рдХреИрд▓реЛрд░реА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
        "enter_calories": "рджреИрдирд┐рдХ рдХреИрд▓реЛрд░реА рд╕реЗрд╡рди рджрд░реНрдЬ рдХрд░реЗрдВ (рдХрд┐рд▓реЛрдХреИрд▓реЛрд░реА)",
        "nutrient_weight": "тЪЦя╕П рдкреЛрд╖рдХ рддрддреНрд╡ рд╡рдЬрди",
        "nutrient_score": "рдкреЛрд╖рдХ рддрддреНрд╡ рд╕реНрдХреЛрд░ рдХрд╛ рдорд╣рддреНрд╡",
        "health_score": "рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕реНрдХреЛрд░ рдХрд╛ рдорд╣рддреНрд╡",
        "diversity_score": "рд╡рд┐рд╡рд┐рдзрддрд╛ рд╕реНрдХреЛрд░ рдХрд╛ рдорд╣рддреНрд╡",
        "protein_ratio": "рдкреНрд░реЛрдЯреАрди рдЕрдиреБрдкрд╛рдд рдХрд╛ рдорд╣рддреНрд╡",
        "generate": "тЬи рдпреЛрдЬрдирд╛ рдмрдирд╛рдПрдВ",
        "how_it_works": "рдпрд╣ рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ:",
        "step1": "рд╕рд╛рдЗрдбрдмрд╛рд░ рдореЗрдВ рдЕрдкрдиреА рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЬрд╛рдирдХрд╛рд░реА рднрд░реЗрдВ",
        "step2": "рдЕрдкрдиреЗ рд▓рдХреНрд╖реНрдп рдФрд░ рдкреНрд░рд╛рдердорд┐рдХрддрд╛рдПрдВ рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдХрд░реЗрдВ",
        "step3": "рдЕрдиреБрдХреВрд▓рд┐рдд рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП 'рдпреЛрдЬрдирд╛ рдмрдирд╛рдПрдВ' рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ",
        "health_metrics": "ЁЯУК рдЖрдкрдХреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдореЗрдЯреНрд░рд┐рдХреНрд╕",
        "bmi": "рдмреАрдПрдордЖрдИ",
        "underweight": "рдХрдо рд╡рдЬрди: рдХреИрд▓реЛрд░реА рдмрдврд╝рд╛рдиреЗ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ",
        "normal": "рд╕рд╛рдорд╛рдиреНрдп рд╡рдЬрди: рдЕрдЪреНрдЫрд╛ рдХрд╛рдо!",
        "overweight": "рдЕрдзрд┐рдХ рд╡рдЬрди: рдХреИрд▓реЛрд░реА рдХрдо рдХрд░рдиреЗ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВ",
        "obese": "рдореЛрдЯрд╛рдкрд╛: рдХреИрд▓реЛрд░реА рдореЗрдВ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдХрдореА рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХреА рдЧрдИ",
        "recommended_calories": "рдЕрдиреБрд╢рдВрд╕рд┐рдд рдХреИрд▓реЛрд░реА",
        "your_intake": "рдЖрдкрдХрд╛ рдХреИрд▓реЛрд░реА рд╕реЗрд╡рди",
        "lower": "рдЖрдкрдХрд╛ рд╕реЗрд╡рди рдЕрдиреБрд╢рдВрд╕рд┐рдд рд╕реЗ рдХрдо рд╣реИ",
        "higher": "рдЖрдкрдХрд╛ рд╕реЗрд╡рди рдЕрдиреБрд╢рдВрд╕рд┐рдд рд╕реЗ рдЕрдзрд┐рдХ рд╣реИ",
        "aligns": "рдЖрдкрдХрд╛ рд╕реЗрд╡рди рд╕рд┐рдлрд╛рд░рд┐рд╢реЛрдВ рдХреЗ рдЕрдиреБрд░реВрдк рд╣реИ",
        "meal_plan": "ЁЯН╜я╕П рдЖрдкрдХреА рд╡реНрдпрдХреНрддрд┐рдЧрдд рднреЛрдЬрди рдпреЛрдЬрдирд╛",
        "daily_meals": "рдЖрдкрдХреЗ рджреИрдирд┐рдХ рднреЛрдЬрди",
        "nutrient_intake": "ЁЯУК рджреИрдирд┐рдХ рдкреЛрд╖рдХ рддрддреНрд╡ рд╕реЗрд╡рди рд╡рд┐рд╡рд░рдг",
        "macronutrient": "ЁЯеЧ рдореИрдХреНрд░реЛрдиреНрдпреВрдЯреНрд░рд┐рдПрдВрдЯ рд╡рд┐рддрд░рдг",
        "food_recommendation": "ЁЯФН рднреЛрдЬрди рд╕рд┐рдлрд╛рд░рд┐рд╢ рд╕реНрдерд╛рди",
        "exercise_plan": "ЁЯПЛя╕П рдЖрдкрдХреА рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╡реНрдпрд╛рдпрд╛рдо рдпреЛрдЬрдирд╛",
        "full_body": "рдкреВрд░реНрдг-рд╢рд░реАрд░ рд╡рд░реНрдХрдЖрдЙрдЯ рдпреЛрдЬрдирд╛",
        "exercise_tips": "рд╡реНрдпрд╛рдпрд╛рдо рд╕реБрдЭрд╛рд╡",
        "weight_loss_tips": "- рдХрд╛рд░реНрдбрд┐рдпреЛ рд╡реНрдпрд╛рдпрд╛рдо рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ (30-60 рдорд┐рдирдЯ рдкреНрд░рддрд┐ рд╕рддреНрд░)\n- рд╕рдкреНрддрд╛рд╣ рдореЗрдВ 2-3 рдмрд╛рд░ HIIT рд╡рд░реНрдХрдЖрдЙрдЯ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ\n- рдорд╛рдВрд╕рдкреЗрд╢рд┐рдпреЛрдВ рдХреЛ рдмрдирд╛рдП рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рд╕реНрдЯреНрд░реЗрдВрде рдЯреНрд░реЗрдирд┐рдВрдЧ",
        "muscle_gain_tips": "- рд╕реНрдЯреНрд░реЗрдВрде рдЯреНрд░реЗрдирд┐рдВрдЧ рдХреЛ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рджреЗрдВ (рд╕рдкреНрддрд╛рд╣ рдореЗрдВ 3-5 рдмрд╛рд░)\n- рдкреНрд░реЛрдЧреНрд░реЗрд╕рд┐рд╡ рдУрд╡рд░рд▓реЛрдб рдкрд░ рдзреНрдпрд╛рди рджреЗрдВ\n- рд╡рд░реНрдХрдЖрдЙрдЯреНрд╕ рдХреЗ рдмреАрдЪ рдкрд░реНрдпрд╛рдкреНрдд рдЖрд░рд╛рдо рджреЗрдВ",
        "maintenance_tips": "- рдХрд╛рд░реНрдбрд┐рдпреЛ рдФрд░ рд╕реНрдЯреНрд░реЗрдВрде рдЯреНрд░реЗрдирд┐рдВрдЧ рдХреЗ рдмреАрдЪ рд╕рдВрддреБрд▓рди рдмрдирд╛рдПрдВ\n- рдКрдм рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП рд╡рд┐рднрд┐рдиреНрди рдЧрддрд┐рд╡рд┐рдзрд┐рдпреЛрдВ рдХреЛ рдЖрдЬрдорд╛рдПрдВ\n- рдЕрдкрдиреЗ рд╢рд░реАрд░ рдХреА рд╕реБрдиреЗрдВ рдФрд░ рдЖрд╡рд╢реНрдпрдХрддрд╛рдиреБрд╕рд╛рд░ рд╕рдорд╛рдпреЛрдЬрд┐рдд рдХрд░реЗрдВ",
        "download_meal": "ЁЯУе рднреЛрдЬрди рдпреЛрдЬрдирд╛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ",
        "fill_details": "ЁЯСИ рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╕рд╛рдЗрдбрдмрд╛рд░ рдореЗрдВ рдЕрдкрдирд╛ рд╡рд┐рд╡рд░рдг рднрд░реЗрдВ рдФрд░ 'рдпреЛрдЬрдирд╛ рдмрдирд╛рдПрдВ' рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ"
    },
    "marathi": {
        "title": "ЁЯН╜я╕П рд╡реИрдпрдХреНрддрд┐рдХ рдЖрд╣рд╛рд░ рдЖрдгрд┐ рд╡реНрдпрд╛рдпрд╛рдо рдпреЛрдЬрдирд╛",
        "instructions": "рддреБрдордЪреА рд╡реИрдпрдХреНрддрд┐рдХ рдЖрд╣рд╛рд░ рдЖрдгрд┐ рд╡реНрдпрд╛рдпрд╛рдо рдпреЛрдЬрдирд╛ рдорд┐рд│рд╡рд┐рдгреНрдпрд╛рд╕рд╛рдареА рддреБрдордЪреЗ рддрдкрд╢реАрд▓ рднрд░рд╛.",
        "personal_info": "ЁЯСд рд╡реИрдпрдХреНрддрд┐рдХ рдорд╛рд╣рд┐рддреА",
        "age": "рддреБрдордЪреЗ рд╡рдп рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛",
        "gender": "рд▓рд┐рдВрдЧ",
        "weight": "рддреБрдордЪреЗ рд╡рдЬрди рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛ (рдХрд┐рд▓реЛ)",
        "height": "рддреБрдордЪреА рдЙрдВрдЪреА рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛ (рд╕реЗрдореА)",
        "activity": "рдХреНрд░рд┐рдпрд╛рдХрд▓рд╛рдк рд╕реНрддрд░",
        "goals": "ЁЯОп рдЙрджреНрджрд┐рд╖реНрдЯреЗ рдЖрдгрд┐ рдкреНрд░рд╛рдзрд╛рдиреНрдпреЗ",
        "goal_select": "рддреБрдордЪреЗ рдЙрджреНрджрд┐рд╖реНрдЯ рдирд┐рд╡рдбрд╛",
        "food_pref": "рдЕрдиреНрди рдкреНрд░рд╛рдзрд╛рдиреНрдп",
        "region_pref": "рдкрд╕рдВрддреАрдЪреЗ рдкреНрд░рджреЗрд╢",
        "allergies": "ре▓рд▓рд░реНрдЬреА/рдЖрд╣рд╛рд░ рдирд┐рд░реНрдмрдВрдз",
        "calorie_intake": "ЁЯФе рдХреЕрд▓рд░реА рд╕реЗрд╡рди (рдкрд░реНрдпрд╛рдпреА)",
        "use_calculated": "рдЧрдгрдирд╛ рдХреЗрд▓реЗрд▓реНрдпрд╛ рд╢рд┐рдлрд╛рд░рд╕ рдХреЗрд▓реЗрд▓реНрдпрд╛ рдХреЕрд▓рд░реА рд╡рд╛рдкрд░рд╛",
        "enter_calories": "рджреИрдирдВрджрд┐рди рдХреЕрд▓рд░реА рд╕реЗрд╡рди рдкреНрд░рд╡рд┐рд╖реНрдЯ рдХрд░рд╛ (рдХрд┐рд▓реЛрдХреЕрд▓рд░реА)",
        "nutrient_weight": "тЪЦя╕П рдкреЛрд╖рдХ рдШрдЯрдХ рд╡рдЬрди",
        "nutrient_score": "рдкреЛрд╖рдХ рдШрдЯрдХ рд╕реНрдХреЛрд░рдЪреЗ рдорд╣рддреНрддреНрд╡",
        "health_score": "рдЖрд░реЛрдЧреНрдп рд╕реНрдХреЛрд░рдЪреЗ рдорд╣рддреНрддреНрд╡",
        "diversity_score": "рд╡рд┐рд╡рд┐рдзрддрд╛ рд╕реНрдХреЛрд░рдЪреЗ рдорд╣рддреНрддреНрд╡",
        "protein_ratio": "рдкреНрд░рдерд┐рдиреЗ рдЧреБрдгреЛрддреНрддрд░рд╛рдЪреЗ рдорд╣рддреНрддреНрд╡",
        "generate": "тЬи рдпреЛрдЬрдирд╛ рддрдпрд╛рд░ рдХрд░рд╛",
        "how_it_works": "рд╣реЗ рдХрд╕реЗ рдХрд╛рд░реНрдп рдХрд░рддреЗ:",
        "step1": "рд╕рд╛рдЗрдбрдмрд╛рд░рдордзреНрдпреЗ рддреБрдордЪреЗ рд╡реИрдпрдХреНрддрд┐рдХ рддрдкрд╢реАрд▓ рднрд░рд╛",
        "step2": "рддреБрдордЪреА рдЙрджреНрджрд┐рд╖реНрдЯреЗ рдЖрдгрд┐ рдкреНрд░рд╛рдзрд╛рдиреНрдпреЗ рд╕реЗрдЯ рдХрд░рд╛",
        "step3": "рд╕рд╛рдиреБрдХреВрд▓рд┐рдд рд╢рд┐рдлрд╛рд░рд╕реА рдорд┐рд│рд╡рд┐рдгреНрдпрд╛рд╕рд╛рдареА 'рдпреЛрдЬрдирд╛ рддрдпрд╛рд░ рдХрд░рд╛' рд╡рд░ рдХреНрд▓рд┐рдХ рдХрд░рд╛",
        "health_metrics": "ЁЯУК рддреБрдордЪреЗ рдЖрд░реЛрдЧреНрдп рдореЗрдЯреНрд░рд┐рдХреНрд╕",
        "bmi": "BMI",
        "underweight": "рдХрдореА рд╡рдЬрди: рдХреЕрд▓рд░реА рд╡рд╛рдврд╡рд┐рдгреНрдпрд╛рдЪрд╛ рд╡рд┐рдЪрд╛рд░ рдХрд░рд╛",
        "normal": "рд╕рд╛рдорд╛рдиреНрдп рд╡рдЬрди: рдЪрд╛рдВрдЧрд▓реЗ рдХрд╛рдо!",
        "overweight": "рдЕрдзрд┐рдХ рд╡рдЬрди: рдХреЕрд▓рд░реА рдХрдореА рдХрд░рдгреНрдпрд╛рдЪрд╛ рд╡рд┐рдЪрд╛рд░ рдХрд░рд╛",
        "obese": "рд╕реНрдереВрд▓рддрд╛: рдХреЕрд▓рд░реАрдордзреНрдпреЗ рд▓рдХреНрд╖рдгреАрдп рдШрдЯ рдХрд░рдгреНрдпрд╛рдЪреА рд╢рд┐рдлрд╛рд░рд╕",
        "recommended_calories": "рд╢рд┐рдлрд╛рд░рд╕ рдХреЗрд▓реЗрд▓реНрдпрд╛ рдХреЕрд▓рд░реА",
        "your_intake": "рддреБрдордЪреЗ рдХреЕрд▓рд░реА рд╕реЗрд╡рди",
        "lower": "рддреБрдордЪреЗ рд╕реЗрд╡рди рд╢рд┐рдлрд╛рд░рд╕ рдХреЗрд▓реЗрд▓реНрдпрд╛рдкреЗрдХреНрд╖рд╛ рдХрдореА рдЖрд╣реЗ",
        "higher": "рддреБрдордЪреЗ рд╕реЗрд╡рди рд╢рд┐рдлрд╛рд░рд╕ рдХреЗрд▓реЗрд▓реНрдпрд╛рдкреЗрдХреНрд╖рд╛ рдЬрд╛рд╕реНрдд рдЖрд╣реЗ",
        "aligns": "рддреБрдордЪреЗ рд╕реЗрд╡рди рд╢рд┐рдлрд╛рд░рд╕реАрдВрд╢реА рдЬреБрд│рддреЗ рдЖрд╣реЗ",
        "meal_plan": "ЁЯН╜я╕П рддреБрдордЪреА рд╡реИрдпрдХреНрддрд┐рдХ рдЖрд╣рд╛рд░ рдпреЛрдЬрдирд╛",
        "daily_meals": "рддреБрдордЪреЗ рджреИрдирдВрджрд┐рди рдЬреЗрд╡рдг",
        "nutrient_intake": "ЁЯУК рджреИрдирдВрджрд┐рди рдкреЛрд╖рдХ рдШрдЯрдХ рд╕реЗрд╡рди рддрдкрд╢реАрд▓",
        "macronutrient": "ЁЯеЧ рдореЕрдХреНрд░реЛрдиреНрдпреВрдЯреНрд░рд┐рдПрдВрдЯ рд╡рд┐рддрд░рдг",
        "food_recommendation": "ЁЯФН рдЕрдиреНрди рд╢рд┐рдлрд╛рд░рд╕ рдЬрд╛рдЧрд╛",
        "exercise_plan": "ЁЯПЛя╕П рддреБрдордЪреА рд╡реИрдпрдХреНрддрд┐рдХ рд╡реНрдпрд╛рдпрд╛рдо рдпреЛрдЬрдирд╛",
        "full_body": "рд╕рдВрдкреВрд░реНрдг-рд╢рд░реАрд░ рд╡реНрдпрд╛рдпрд╛рдо рдпреЛрдЬрдирд╛",
        "exercise_tips": "рд╡реНрдпрд╛рдпрд╛рдо рдЯрд┐рдкрд╛",
        "weight_loss_tips": "- рдХрд╛рд░реНрдбрд┐рдУ рд╡реНрдпрд╛рдпрд╛рдорд╛рдВрд╡рд░ рд▓рдХреНрд╖ рдХреЗрдВрджреНрд░рд┐рдд рдХрд░рд╛ (30-60 рдорд┐рдирд┐рдЯреЗ рдкреНрд░рддрд┐ рд╕рддреНрд░)\n- рдЖрдард╡рдбреНрдпрд╛рддреВрди 2-3 рд╡реЗрд│рд╛ HIIT рд╡реНрдпрд╛рдпрд╛рдо рд╕рдорд╛рд╡рд┐рд╖реНрдЯ рдХрд░рд╛\n- рд╕реНрдирд╛рдпреВ рдЯрд┐рдХрд╡реВрди рдареЗрд╡рдгреНрдпрд╛рд╕рд╛рдареА рд╕реНрдЯреНрд░реЗрдВрде рдЯреНрд░реЗрдирд┐рдВрдЧ",
        "muscle_gain_tips": "- рд╕реНрдЯреНрд░реЗрдВрде рдЯреНрд░реЗрдирд┐рдВрдЧрд▓рд╛ рдкреНрд░рд╛рдзрд╛рдиреНрдп рджреНрдпрд╛ (рдЖрдард╡рдбреНрдпрд╛рддреВрди 3-5 рд╡реЗрд│рд╛)\n- рдкреНрд░рдЧрддреАрд╢реАрд▓ рдУрд╡реНрд╣рд░рд▓реЛрдбрд╡рд░ рд▓рдХреНрд╖ рдХреЗрдВрджреНрд░рд┐рдд рдХрд░рд╛\n- рд╡реНрдпрд╛рдпрд╛рдорд╛рдВрджрд░рдореНрдпрд╛рди рдкреБрд░реЗрд╕рд╛ рд╡рд┐рд╢реНрд░рд╛рдВрддреА рдШреНрдпрд╛",
        "maintenance_tips": "- рдХрд╛рд░реНрдбрд┐рдУ рдЖрдгрд┐ рд╕реНрдЯреНрд░реЗрдВрде рдЯреНрд░реЗрдирд┐рдВрдЧрдордзреНрдпреЗ рд╕рдВрддреБрд▓рди рд░рд╛рдЦрд╛\n- рдХрдВрдЯрд╛рд│рд╛ рдЯрд╛рд│рдгреНрдпрд╛рд╕рд╛рдареА рд╡рд┐рд╡рд┐рдз рдХреНрд░рд┐рдпрд╛рдХрд▓рд╛рдк рдХрд░рд╛\n- рддреБрдордЪреНрдпрд╛ рд╢рд░реАрд░рд╛рдЪреЗ рдРрдХрд╛ рдЖрдгрд┐ рдЖрд╡рд╢реНрдпрдХрддреЗрдиреБрд╕рд╛рд░ рд╕рдорд╛рдпреЛрдЬрд┐рдд рдХрд░рд╛",
        "download_meal": "ЁЯУе рдЖрд╣рд╛рд░ рдпреЛрдЬрдирд╛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рд╛",
        "fill_details": "ЁЯСИ рд╕реБрд░реВ рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рд╕рд╛рдЗрдбрдмрд╛рд░рдордзреНрдпреЗ рддреБрдордЪреЗ рддрдкрд╢реАрд▓ рднрд░рд╛ рдЖрдгрд┐ 'рдпреЛрдЬрдирд╛ рддрдпрд╛рд░ рдХрд░рд╛' рд╡рд░ рдХреНрд▓рд┐рдХ рдХрд░рд╛"
    }
}

# Custom CSS for better UI
st.markdown(
    """
    <style>
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
    h1, h2, h3 {
        color: #2c3e50;
    }
    .stButton button {
        background-color: #4CAF50;
        color: white;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
    }
    .stButton button:hover {
        background-color: #45a049;
    }
    .stSlider {
        color: #4CAF50;
    }
    .stPlot {
        margin: 0;
        padding: 0;
    }
    .info-box {
        background-color: #2c3e50;
        color: white;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 20px;
        border-left: 5px solid #4CAF50;
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
    }
    .info-box h4 {
        color: #4CAF50;
        margin-top: 0;
    }
    .info-box ol {
        padding-left: 20px;
    }
    .info-box li {
        margin-bottom: 8px;
    }
    .snack-container {
        background-color:#f0f8ff; 
        padding:10px; 
        border-radius:10px; 
        border-left: 5px solid #4CAF50; 
        margin-bottom:20px;
    }
    .snack-container h4 {
        color:#2c3e50;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Language selection
language = st.sidebar.selectbox("ЁЯМР Language", ["English", "Hindi", "Marathi"], index=0).lower()
t = translations[language]

# Sidebar for User Inputs
st.sidebar.title(t["title"])
st.sidebar.write(t["instructions"])

# User Inputs
st.sidebar.header(t["personal_info"])
age = st.sidebar.number_input(t["age"], min_value=10, max_value=100, step=1)
gender = st.sidebar.radio(t["gender"], ["Male", "Female"])
weight_kg = st.sidebar.number_input(t["weight"], min_value=30, max_value=200, step=1)
height_cm = st.sidebar.number_input(t["height"], min_value=100, max_value=250, step=1)
activity_level = st.sidebar.selectbox(t["activity"], ["Sedentary", "Lightly Active", "Moderately Active", "Very Active", "Extra Active"])

st.sidebar.header(t["goals"])
goal = st.sidebar.selectbox(t["goal_select"], ["Weight Loss", "Maintenance", "Muscle Gain"])
food_pref = st.sidebar.radio(t["food_pref"], ["Any", "Vegetarian", "Non-Vegetarian"])
region_pref = st.sidebar.multiselect(t["region_pref"], options=load_data()["region"].unique(), default=load_data()["region"].unique())
allergies = st.sidebar.multiselect(t["allergies"], options=load_data()["allergies"].dropna().unique())

st.sidebar.header(t["calorie_intake"])
use_calculated = st.sidebar.checkbox(t["use_calculated"], value=True)
if not use_calculated:
    daily_calories = st.sidebar.number_input(t["enter_calories"], min_value=800, max_value=4000, step=50, value=2000)
else:
    daily_calories = None

st.sidebar.header(t["nutrient_weight"])
pref_nutrient = st.sidebar.slider(t["nutrient_score"], 0, 100, 40)
pref_health = st.sidebar.slider(t["health_score"], 0, 100, 30)
pref_diversity = st.sidebar.slider(t["diversity_score"], 0, 100, 20)
pref_protein = st.sidebar.slider(t["protein_ratio"], 0, 100, 10)

# Main Content Area
st.title(t["title"])
st.markdown(f"""
<div class="info-box">
    <h4>{t["how_it_works"]}</h4>
    <ol>
        <li>{t["step1"]}</li>
        <li>{t["step2"]}</li>
        <li>{t["step3"]}</li>
    </ol>
</div>
""", unsafe_allow_html=True)

# Generate Plans Button
if st.sidebar.button(t["generate"]):
    with st.spinner("Generating your personalized meal and exercise plan..."):
        # Calculate BMI and Recommended Calories
        bmi = calculate_bmi(weight_kg, height_cm)
        bmr = calculate_bmr(age, gender, weight_kg, height_cm)
        recommended_calories = calculate_daily_calories(bmr, activity_level, goal)
        
        # Use calculated calories if not manually specified
        if use_calculated:
            daily_calories = recommended_calories

        # Create Tabs for Diet and Exercise
        tab1, tab2 = st.tabs(["ЁЯН╜я╕П " + t["meal_plan"], "ЁЯПЛя╕П " + t["exercise_plan"]])

        # Diet Plan Tab
        with tab1:
            st.header(t["health_metrics"])
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("BMI", f"{bmi:.1f}")
                if bmi < 18.5:
                    st.warning(t["underweight"])
                elif 18.5 <= bmi < 24.9:
                    st.success(t["normal"])
                elif 25 <= bmi < 29.9:
                    st.warning(t["overweight"])
                else:
                    st.error(t["obese"])
            
            with col2:
                st.metric(t["recommended_calories"], f"{recommended_calories:.0f} kcal")
                if not use_calculated:
                    st.metric(t["your_intake"], f"{daily_calories} kcal")
                    if daily_calories < recommended_calories * 0.95:
                        st.warning(t["lower"])
                    elif daily_calories > recommended_calories * 1.05:
                        st.warning(t["higher"])
                    else:
                        st.success(t["aligns"])

            st.header(t["meal_plan"])
            data = load_data()
            
            # Show diet recommendations
            meal_plans, total_nutrients = recommend_diet(
                daily_calories=daily_calories,
                pref_nutrient=pref_nutrient,
                pref_health=pref_health,
                pref_diversity=pref_diversity,
                pref_protein=pref_protein,
                region_pref=region_pref,
                food_pref=food_pref,
                allergies=allergies,
                data=data
            )
            
            # Create a DataFrame for the meal plan
            meal_plan_df = pd.DataFrame()
            for meal, plan in meal_plans.items():
                meal_df = pd.DataFrame(plan, columns=["Food Item", "Serving Size (g)", "Calories", "Protein (g)", "Carbs (g)", "Fats (g)"])
                meal_df["Meal"] = meal.capitalize()
                meal_plan_df = pd.concat([meal_plan_df, meal_df])
            
            # Add download button for meal plan
            csv = meal_plan_df.to_csv(index=False).encode('utf-8')
            st.download_button(
                label=t["download_meal"],
                data=csv,
                file_name='personalized_meal_plan.csv',
                mime='text/csv',
            )
            
            # Display all meals with special styling for snacks
            st.subheader(t["daily_meals"])
            for meal, plan in meal_plans.items():
                if meal == "snack":
                    with st.container():
                        st.markdown(
                            f"""
                            <div class="snack-container">
                                <h4>ЁЯНО {meal.capitalize()}</h4>
                                {pd.DataFrame(plan, columns=["Food Item", "Serving Size (g)", "Calories", "Protein (g)", "Carbs (g)", "Fats (g)"]).to_html(index=False)}
                            </div>
                            """,
                            unsafe_allow_html=True
                        )
                else:
                    with st.container():
                        st.subheader(f"ЁЯН╜я╕П {meal.capitalize()}")
                        st.table(pd.DataFrame(plan, columns=["Food Item", "Serving Size (g)", "Calories", "Protein (g)", "Carbs (g)", "Fats (g)"]))
            
            # Daily Nutrient Intake Table
            st.header(t["nutrient_intake"])
            
            # Create a more detailed nutrient table
            nutrient_data = {
                "Nutrient": ["Calories", "Protein", "Carbohydrates", "Fats"],
                "Total Intake": [
                    total_nutrients["Calories"],
                    total_nutrients["Protein"],
                    total_nutrients["Carbs"],
                    total_nutrients["Fats"]
                ],
                "Recommended": [
                    daily_calories,
                    daily_calories * 0.3 / 4,  # 30% of calories from protein (4 cal/g)
                    daily_calories * 0.5 / 4,   # 50% of calories from carbs (4 cal/g)
                    daily_calories * 0.2 / 9     # 20% of calories from fats (9 cal/g)
                ],
                "Percentage": [
                    f"{total_nutrients['Calories']/daily_calories*100:.1f}%",
                    f"{total_nutrients['Protein']/(daily_calories*0.3/4)*100:.1f}%",
                    f"{total_nutrients['Carbs']/(daily_calories*0.5/4)*100:.1f}%",
                    f"{total_nutrients['Fats']/(daily_calories*0.2/9)*100:.1f}%"
                ]
            }
            
            # Display the nutrient table with conditional formatting
            df_nutrients = pd.DataFrame(nutrient_data)
            st.dataframe(
                df_nutrients.style.format({
                    "Total Intake": "{:.1f}",
                    "Recommended": "{:.1f}"
                }).applymap(lambda x: "color: green" if float(x[:-1]) > 90 else "color: orange" if x.endswith("%") and float(x[:-1]) < 70 else "", 
                          subset=["Percentage"]),
                use_container_width=True
            )
            
            # Macronutrient Pie Chart
            st.header(t["macronutrient"])
            fig = px.pie(
                names=["Protein", "Carbs", "Fats"],
                values=[total_nutrients["Protein"]*4, total_nutrients["Carbs"]*4, total_nutrients["Fats"]*9],
                title="Calorie Contribution by Macronutrient",
                color=["Protein", "Carbs", "Fats"],
                color_discrete_map={"Protein": "#4CAF50", "Carbs": "#FFC107", "Fats": "#FF5722"}
            )
            fig.update_traces(textposition="inside", textinfo="percent+label")
            st.plotly_chart(fig, use_container_width=True, key="macronutrient_pie_chart")
            
            # Show visualization
            st.header(t["food_recommendation"])
            st.write("Visualizing how your preferences align with different food options:")
            show_3d_visualization(
                df=data,
                pref_nutrient=pref_nutrient,
                pref_health=pref_health,
                pref_diversity=pref_diversity,
                pref_protein=pref_protein,
                goal=goal
            )

        # Exercise Plan Tab
# In your Streamlit app, replace the exercise plan tab content with:

# Exercise Plan Tab
        with tab2:
            st.header("ЁЯПЛя╕П Your Personalized Weekly Exercise Plan")
            
            # Initialize ExerciseRecommender
            recommender = ExerciseRecommender()
            
            # Show weekly plan overview
            st.subheader("ЁЯУЕ Weekly Workout Schedule")
            weekly_plan = recommender.get_weekly_plan()
            
            cols = st.columns(7)
            for i, (day, muscles) in enumerate(weekly_plan.items()):
                with cols[i]:
                    st.markdown(f"**{day}**")
                    if "Rest" in muscles[0]:
                        st.write("ЁЯЫМ Rest")
                        st.write("or")
                        st.write("ЁЯПГ Cardio")
                    else:
                        for muscle in muscles:
                            st.write(f"ЁЯТк {muscle}")
            
            # Show detailed workouts for all days
            st.subheader("ЁЯТб Daily Workout Details")
            for day in weekly_plan:
                with st.expander(f"{day} Workout", expanded=True):
                    day_workout = recommender.get_day_workout(day)
                    
                    if "Rest" in day_workout:
                        st.markdown("### Rest Day Recommendations")
                        st.write("""
                        - Active recovery (light walking, stretching)
                        - Focus on mobility work
                        - Hydrate well
                        - Optionally do light cardio (30 mins max)
                        """)
                    else:
                        for muscle_group, exercises in day_workout.items():
                            st.markdown(f"### {muscle_group} Exercises")
                            st.table(exercises)
                            st.markdown(f"**Expert Tip:** {recommender.get_expert_tips(muscle_group)}")
                        
                        # Add workout notes section
                        st.text_area("Add your personal notes for this workout", 
                                key=f"notes_{day}",
                                height=100)

            # Add general exercise tips based on goal
            st.subheader("ЁЯОп Goal-Specific Training Tips")
            if goal == "Weight Loss":
                st.write(t["weight_loss_tips"])
            elif goal == "Muscle Gain":
                st.write(t["muscle_gain_tips"])
            else:  # Maintenance
                st.write(t["maintenance_tips"])
            
            # Add download option for workout plan
            st.download_button(
                label="ЁЯУе Download Weekly Workout Plan",
                data=pd.DataFrame.from_dict(weekly_plan, orient='index').to_csv(),
                file_name='weekly_workout_plan.csv',
                mime='text/csv'
    )
# Show instructions if not generated yet
else:
    st.info(t["fill_details"])
    st.image("https://images.unsplash.com/photo-1498837167922-ddd27525d352", caption="Healthy eating and exercise lead to better health")